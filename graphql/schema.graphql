"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

type Query {
    user(
      id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

      email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

  users(
      "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
      name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10)

  notes_by_id_user(user_id: ID! @eq status: String! @eq orderBy: _  @orderBy(columns:["created_at"])): [Note!]! @guard @paginate(defaultCount: 200)

  note_by_id(id: ID! @eq status: String! @eq): Note! @find

}


extend type Mutation {
  login(input: LoginInput @spread): AuthPayload! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Login@resolve")
  refreshToken(input: RefreshTokenInput @spread): RefreshTokenPayload! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\RefreshToken@resolve")
  logout: LogoutResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Logout@resolve")
  forgotPassword(input: ForgotPasswordInput! @spread): ForgotPasswordResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\ForgotPassword@resolve")
  updateForgottenPassword(input: NewPasswordWithCodeInput @spread): ForgotPasswordResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\ResetPassword@resolve")
  register(input: RegisterInput @spread): RegisterResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Register@resolve")
  socialLogin(input: SocialLoginInput! @spread): AuthPayload! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\SocialLogin@resolve")
  verifyEmail(input: VerifyEmailInput! @spread): AuthPayload! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\VerifyEmail@resolve")
  updatePassword(input: UpdatePassword! @spread): UpdatePasswordResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\UpdatePassword@resolve") @guard(with: ["api"])

  registerNote(input: NoteInput @spread): Note @create
  updateNote(input: NoteUpdateInput @spread): Note @update

  forgotPasswordUser(input: ForgotPasswordInput! @spread): ForgotPasswordResponse! @field(resolver: "App\\Http\\Controllers\\ForgoPasswordResolver@checkUserEmail")
  updatePasswordUser(input: NewPasswordWithCodInput! @spread): NewPasswordWithCodResponse! @field(resolver: "App\\Http\\Controllers\\UpdatePasswordResolver@updatePasswordUser")
  updatedUser(input: UpdateUserInput! @spread): NewPasswordWithCodResponse! @field(resolver: "App\\Http\\Controllers\\UpdateUserResolver@updateUserResolver")

}


type User {
    id: ID!
    name: String!
    email: String!
    email_verified_at: DateTime
    created_at: DateTime!
    updated_at: DateTime!
}

type Note {
    id: ID!
    user: User! @belongsTo
    title: String!
    note: String!
    status: String!
    created_at: DateTime!
    updated_at: DateTime!
}
